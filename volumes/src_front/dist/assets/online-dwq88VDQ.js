const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/connect4-BbXMBGIx.js","assets/index-CspSaxt6.js","assets/index-D3Eed0Yt.css"])))=>i.map(i=>d[i]);
var f=Object.defineProperty;var w=(u,l,e)=>l in u?f(u,l,{enumerable:!0,configurable:!0,writable:!0,value:e}):u[l]=e;var g=(u,l,e)=>w(u,typeof l!="symbol"?l+"":l,e);import{P as b,_ as v}from"./index-CspSaxt6.js";class _ extends b{constructor(e,t){super(e,t);g(this,"connect4Game",null);g(this,"gameSocket",null)}customizeOnlineTournamentPage(){console.log("Customize online tournament page after game end")}cleanupConnect4Game(){}async render(){this.container.innerHTML="",await super.setupHeaderListeners();const e=document.createElement("div");return e.className="min-h-screen pt-16 relative overflow-hidden flex flex-row bg-cyber-dark",e.innerHTML=`
			${await super.createSidebar()}
			
			<!-- Main Content -->
			<main class="flex-1 flex flex-col relative">
				<!-- Background Effects -->
				<div class="absolute inset-0 z-0">
					<div class="absolute inset-0 bg-grid-overlay opacity-20"></div>
					<div class="absolute inset-0 scanlines"></div>
					<!-- Cyber borders -->
					<div class="absolute top-8 left-8 w-16 h-16 border-l-2 border-t-2 border-neon-pink opacity-50"></div>
					<div class="absolute top-8 right-8 w-16 h-16 border-r-2 border-t-2 border-neon-cyan opacity-50"></div>
					<div class="absolute bottom-8 left-8 w-16 h-16 border-l-2 border-b-2 border-neon-cyan opacity-50"></div>
					<div class="absolute bottom-8 right-8 w-16 h-16 border-r-2 border-b-2 border-neon-pink opacity-50"></div>
				</div>
				
				<!-- Header Section -->
				<div class="relative z-10 text-center pt-8 pb-4">
					<h1 class="text-4xl font-cyber text-neon-pink animate-glow-pulse mb-4 tracking-wider">TOURNAMENT ROOMS</h1>
					<div class="h-1 w-32 bg-gradient-to-r from-neon-pink to-neon-cyan mx-auto mb-4"></div>
					<p class="text-neon-cyan font-cyber text-xl">COMPETE WITH PLAYERS WORLDWIDE</p>
				</div>

				<!-- Room Management Container -->
				<div class="relative z-10 flex-1 px-8 pb-8">
					<div id="messageOut" class="text-center text-white text-3xl p-4 hidden"></div>

					<!-- Room In View -->
					<div id="room_in" class="hidden max-w-4xl mx-auto">
						<div class="bg-cyber-darker/90 backdrop-blur-md p-8 rounded-lg border-2 border-neon-pink/40 shadow-lg shadow-neon-pink/20">
							<div class="text-center mb-6">
								<h2 id="nameRoomNew" class="text-3xl font-cyber text-neon-pink mb-2">Room Name</h2>
								<p id="idRoomNew" class="text-lg text-neon-cyan font-tech">Room ID: </p>
							</div>

							<!-- Invite Section -->
							<div class="mb-6 p-4 bg-cyber-dark/50 border border-neon-cyan/30 rounded">
								<h3 class="text-neon-cyan font-cyber mb-3">INVITE PLAYERS</h3>
								<div class="flex gap-3">
									<input id="usernameInviteText" type="text" class="flex-1 bg-cyber-dark border-2 border-neon-pink/30 text-white px-4 py-2 rounded font-tech" placeholder="Enter User ID">
									<button id="buttonInvite" class="bg-gradient-to-r from-neon-pink to-neon-cyan text-white font-cyber px-6 py-2 rounded hover:shadow-lg hover:shadow-neon-pink/50 transition-all duration-300">INVITE</button>
								</div>
							</div>

							<!-- Players Table -->
							<div class="mb-6">
								<h3 class="text-neon-cyan font-cyber mb-4">CURRENT PLAYERS</h3>
								<div class="overflow-hidden rounded-lg border border-neon-cyan/30">
									<table class="w-full bg-cyber-dark">
										<thead>
											<tr class="bg-cyber-darker border-b border-neon-cyan/20">
												<th class="px-6 py-3 text-left text-neon-cyan font-cyber">Username</th>
												<th class="px-6 py-3 text-center text-neon-cyan font-cyber">Action</th>
											</tr>
										</thead>
										<tbody id="tablePlayersRoom">
											<!-- Les joueurs seront ajout√©s dynamiquement par JavaScript -->
										</tbody>
									</table>
								</div>
							</div>

							<!-- Action Buttons -->
							<div class="flex flex-wrap gap-4 justify-center">
								<button id="buttonStart" class="hidden bg-gradient-to-r from-neon-cyan to-neon-pink text-white font-cyber px-8 py-3 rounded-lg text-xl hover:shadow-lg hover:shadow-green-500/50 transition-all duration-300">START TOURNAMENT</button>
								<button id="buttonDestroy" class="hidden bg-gradient-to-r from-red-500 to-red-600 text-white font-cyber px-6 py-2 rounded hover:shadow-lg hover:shadow-red-500/50 transition-all duration-300">DESTROY ROOM</button>
								<button id="buttonQuitRoom" class="bg-cyber-dark border-2 border-red-500/50 text-red-400 font-cyber px-6 py-2 rounded hover:border-red-500 hover:shadow-lg hover:shadow-red-500/20 transition-all duration-300">QUIT ROOM</button>
							</div>
						</div>
					</div>

					<!-- Room Out View -->
					<div id="room_out" class="hidden max-w-4xl mx-auto">
						<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
							<!-- Join Room Section -->
							<div class="bg-cyber-darker/90 backdrop-blur-md p-8 rounded-lg border-2 border-neon-cyan/40 shadow-lg shadow-neon-cyan/20">
								<h2 class="text-3xl font-cyber text-neon-cyan mb-6 text-center">JOIN ROOM</h2>
								<div class="space-y-4">
									<div>
										<label class="block text-neon-cyan font-tech text-sm mb-2">Room ID</label>
										<input type="text" id="roomIdJoin" class="w-full bg-cyber-dark border-2 border-neon-cyan/30 text-white px-4 py-3 rounded font-tech" placeholder="Enter Room ID (e.g., 123)">
									</div>
									<button id="buttonJoin" class="w-full bg-gradient-to-r from-neon-cyan to-neon-pink text-white font-cyber px-6 py-3 rounded-lg text-xl hover:shadow-lg hover:shadow-neon-cyan/50 transition-all duration-300">JOIN ROOM</button>
								</div>
							</div>

							<!-- Create Room Section -->
							<div class="bg-cyber-darker/90 backdrop-blur-md p-8 rounded-lg border-2 border-neon-pink/40 shadow-lg shadow-neon-pink/20">
								<h2 class="text-3xl font-cyber text-neon-pink mb-6 text-center">CREATE ROOM</h2>
								<div class="space-y-4">
									<div>
										<label class="block text-neon-pink font-tech text-sm mb-2">Room Name</label>
										<input id="roomNameCreate" type="text" class="w-full bg-cyber-dark border-2 border-neon-pink/30 text-white px-4 py-3 rounded font-tech" placeholder="Enter Room Name">
									</div>
									<button id="buttonCreate" class="w-full bg-gradient-to-r from-neon-pink to-neon-cyan text-white font-cyber px-6 py-3 rounded-lg text-xl hover:shadow-lg hover:shadow-neon-pink/50 transition-all duration-300">CREATE ROOM</button>
								</div>
							</div>
						</div>
					</div>

					<!-- Room Finished View -->
					<div id="room_finished" class="hidden max-w-2xl mx-auto">
						<div class="bg-cyber-darker/90 backdrop-blur-md p-8 rounded-lg border-2 border-yellow-500/40 shadow-lg shadow-yellow-500/20 text-center">
							<div class="mb-8">
								<div class="text-4xl font-cyber text-yellow-400 mb-4">üèÜ TOURNAMENT COMPLETE üèÜ</div>
								<p id="winnerName" class="text-3xl font-cyber text-neon-pink mb-2">The winner is: </p>
								<div class="h-1 w-24 bg-gradient-to-r from-yellow-400 to-yellow-600 mx-auto mb-6"></div>
							</div>
							
							<!-- Game Over Action Buttons -->
							<div class="flex flex-col sm:flex-row gap-4 justify-center">
								<button id="buttonFinish" class="bg-cyber-dark border-2 from-neon-cyan to-neon-pink text-white font-cyber px-8 py-3 rounded-lg text-xl hover:border-yellow-500 hover:shadow-lg hover:shadow-yellow-500/20 transition-all duration-300">
									QUIT ROOM
								</button>
							</div>
						</div>
					</div>

					<!-- Room Forbidden View -->
					<div id="room_forbidden" class="hidden max-w-2xl mx-auto">
						<div class="bg-cyber-darker/90 backdrop-blur-md p-8 rounded-lg border-2 border-red-500/40 shadow-lg shadow-red-500/20 text-center">
							<h2 class="text-3xl font-cyber text-red-400 mb-4">ACCESS DENIED</h2>
							<p class="text-xl text-white mb-6">You can't access the room page. Only one page allowed.</p>
						</div>
					</div>

					<!-- Room Started View -->
					<div id="room_started" class="max-w-5xl mx-auto">
						<div class="bg-cyber-darker/90 backdrop-blur-md p-8 rounded-lg border-2 border-neon-pink/40 shadow-lg shadow-neon-pink/20">
							<div class="text-center mb-6">
								<h2 id="nameRoomNewStarted" class="text-3xl font-cyber text-neon-pink mb-2">Room Name</h2>
								<p id="idRoomNewStarted" class="text-lg text-neon-cyan font-tech mb-2">Room ID: </p>
								<p id="roundRoomNewStarted" class="text-2xl text-yellow-400 font-cyber">Round: </p>
								<p id="lastMatchResult" class="text-xl text-gray-300 font-tech mt-2"></p>
							</div>

							<!-- Matches Table -->
							<div class="mb-6">
								<h3 class="text-neon-cyan font-cyber mb-4 text-center">CURRENT MATCHES</h3>
								<div class="overflow-hidden rounded-lg border border-neon-cyan/30">
									<table class="w-full bg-cyber-dark">
										<thead>
											<tr class="bg-cyber-darker border-b border-neon-cyan/20">
												<th class="px-6 py-3 text-center text-neon-cyan font-cyber">Match ID</th>
												<th class="px-6 py-3 text-center text-neon-cyan font-cyber">First Player</th>
												<th class="px-6 py-3 text-center text-neon-cyan font-cyber">Second Player</th>
											</tr>
										</thead>
										<tbody id="tablePlayersRoomStarted">
										</tbody>
									</table>
								</div>
							</div>

							<!-- Match Actions -->
							<div id="joinMatchDiv" class="text-center space-y-4">
								<button id="joinMatchButton" class="inline-block bg-gradient-to-r from-neon-cyan to-neon-pink text-white font-cyber px-8 py-3 rounded-lg text-xl hover:shadow-lg hover:shadow-neon-pink/50 transition-all duration-300">JOIN MY CONNECT4 MATCH</button>
								<button id="quickMatchButton" class="inline-block bg-gradient-to-r from-purple-600 to-blue-600 text-white font-cyber px-8 py-3 rounded-lg text-xl hover:shadow-lg hover:shadow-purple-500/50 transition-all duration-300 ml-4">QUICK MATCH (1vs1)</button>
								<p class="text-white font-tech text-xl">Waiting for the next match...</p>
							</div>
						</div>
					</div>

					<!-- Connect4 Game Loading View -->
					<div id="room_loading" class="hidden max-w-5xl mx-auto">
						<div class="bg-cyber-darker/90 backdrop-blur-md p-8 rounded-lg border-2 border-neon-cyan/40 shadow-lg shadow-neon-cyan/20">
							<div class="text-center mb-6">
								<h2 class="text-3xl font-cyber text-neon-cyan mb-4">WAITING FOR OPPONENT</h2>
								<p id="loadingMatchInfo" class="text-lg text-white font-tech mb-6">Match ID: <span id="loadingMatchId"></span></p>
							</div>

							<!-- Loading Animation -->
							<div class="flex justify-center mb-8">
								<div class="relative flex items-center justify-center">
									<svg class="animate-spin drop-shadow-neon-cyan" style="animation-duration:1.2s;" width="110" height="110" viewBox="0 0 110 110">
										<defs>
											<radialGradient id="neonGlow" cx="50%" cy="50%" r="50%">
												<stop offset="0%" stop-color="#00fff7" stop-opacity="0.7"/>
												<stop offset="100%" stop-color="#00fff7" stop-opacity="0"/>
											</radialGradient>
										</defs>
										<circle cx="55" cy="55" r="44" stroke="#00fff7" stroke-width="8" fill="none" opacity="0.18"/>
										<circle cx="55" cy="55" r="44" stroke="#00fff7" stroke-width="8" fill="none" stroke-linecap="round" stroke-dasharray="70 200"/>
										<circle cx="55" cy="55" r="44" fill="url(#neonGlow)"/>
									</svg>
									<div class="absolute w-[140px] h-[140px] rounded-full pointer-events-none" style="box-shadow:0 0 60px 20px #00fff7,0 0 120px 40px #00fff7AA;"></div>
								</div>
							</div>					<div class="text-center space-y-4">
						<p id="loadingStatusText" class="text-2xl font-cyber text-neon-cyan animate-glow-pulse">Waiting for opponent...</p>
						<p id="loadingIndicatorText" class="text-lg text-gray-300 font-tech">Looking for another player to start the Connect4 match</p>
						<p class="text-sm text-gray-400 font-tech">The game will start automatically when both players are connected</p>
						<div class="mt-4">
							<div class="inline-flex items-center space-x-2">
								<div class="w-2 h-2 bg-neon-cyan rounded-full animate-pulse"></div>
								<span class="text-neon-cyan font-tech">Connected to match server</span>
							</div>
						</div>
								<button id="cancelWaitButton" class="bg-red-600 hover:bg-red-700 text-white font-cyber px-6 py-2 rounded transition-all duration-300 mt-4">CANCEL</button>
							</div>
						</div>
					</div>

					<!-- Connect4 Game View -->
					<div id="room_playing" class="hidden max-w-5xl mx-auto">
						<div class="bg-cyber-darker/90 backdrop-blur-md p-8 rounded-lg border-2 border-neon-pink/40 shadow-lg shadow-neon-pink/20">
							<div class="text-center mb-6">
								<h2 class="text-3xl font-cyber text-neon-pink mb-2">CONNECT4 TOURNAMENT MATCH</h2>
								<p id="matchInfo" class="text-lg text-neon-cyan font-tech mb-2">Match in progress...</p>
								<p id="gameStatusText" class="text-xl text-yellow-400 font-cyber">Waiting for game to start...</p>
							</div>					<!-- Connect4 Game Container -->
					<div id="connect4GameContainer" class="w-full">
						<!-- The Connect4 game will be dynamically loaded here -->
					</div>

							<!-- Game Actions -->
							<div class="text-center space-y-4">
								<button id="giveUpButton" class="bg-red-600 hover:bg-red-700 text-white font-cyber px-8 py-3 rounded-lg text-xl transition-all duration-300">GIVE UP</button>
								<p class="text-gray-300 font-tech">Your opponent will win if you give up</p>
							</div>
						</div>
					</div>
				</div>
			</main>
		`,this.container.appendChild(e),await this.canShowRoomPage()?(sessionStorage.getItem("ws_to_join")&&(await this.connect_join_room(Number(sessionStorage.getItem("ws_to_join"))),sessionStorage.removeItem("ws_to_join")),await this.reconnectToRoom(),await this.checkIfTournamentFinishedWithError(),await this.removeFromSetConnectionClosed(),await this.showRoomPageWithLocalStorage()):await this.changeRoomPage("forbidden"),await this.joinClickEvent(),await this.createClickEvent(),await this.startClickEvent(),await this.destroyClickEvent(),await this.quitFinishClickEvent(),await this.playAgainClickEvent(),await this.mainMenuClickEvent(),await this.quitRoomEvent(),await this.inviteClickEvent(),await this.joinMatchClickEvent(),await this.giveUpClickEvent(),await this.cancelWaitClickEvent(),await super.setupSidebarListeners(),this.container}async canShowRoomPage(){try{const e=await fetch("https://localhost:4430/api/already_in_room",{method:"GET",credentials:"include"});if(!e.ok)throw new Error("erreur http : "+e.status);const t=await e.json();return t.success==!0&&t.in_room?sessionStorage.getItem("room")?!0:(alert("je n'ai pas de sessionStorage, je nai pas le droit dacceder a cette page"),!1):t.success==!0&&t.in_room==!1}catch{return!1}return!0}async inviteClickEvent(){const e=this.container.querySelector("#buttonInvite");e&&e.addEventListener("click",async()=>{let t=Number(this.container.querySelector("#usernameInviteText").value);try{const o=await fetch("https://localhost:4430/api/invite_player_tournament/"+t,{method:"GET",credentials:"include"});if(!o.ok)throw new Error("erreur http : "+o.status);const n=await o.json();n.success?alert("Invitation sent successfully to user ID: "+t):alert("erreur lors de l'envoi de l'invitation : "+n.error)}catch{alert("erreur denvoi invitation")}})}async showInButtonsIfAdmin(){const e=sessionStorage.getItem("room");if(e!==null){const o=JSON.parse(e).room_id;try{const n=await fetch("https://localhost:4430/api/im_admin/"+o,{method:"GET",credentials:"include"});if(!n.ok)throw new Error("erreur http : "+n.status);const r=await n.json();if(r.success==!0&&r.admin==!0){const a=await this.my_room_nb_players(),s=this.container.querySelector("#buttonStart");s&&(a>=2?s.style.display="inline-block":s.style.display="none");const i=this.container.querySelector("#buttonDestroy");i&&(i.style.display="inline-block");const d=this.container.querySelector("#buttonQuitRoom");d&&(d.style.display="none")}else{const a=this.container.querySelector("#buttonStart");a&&(a.style.display="none");const s=this.container.querySelector("#buttonDestroy");s&&(s.style.display="none");const i=this.container.querySelector("#buttonQuitRoom");i&&(i.style.display="inline-block")}if(r.success==!1)throw new Error("failure")}catch{}}}async removeFromSetConnectionClosed(){try{const e=await fetch("https://localhost:4430/api/forgive_closed_ws_in_room",{method:"GET",credentials:"include"});if(!e.ok)throw new Error("erreur http : "+e.status);(await e.json()).success==!0}catch{}}async checkIfTournamentFinishedWithError(){const e=sessionStorage.getItem("room");if(e!==null){let o=JSON.parse(e).room_id;try{const n=await fetch("https://localhost:4430/api/tournament_finished_with_error/"+o,{method:"GET",credentials:"include"});if(!n.ok)throw new Error("erreur http : "+n.status);const r=await n.json();if(r.success==!0&&r.finished==!0){const a=this.container.querySelector("#messageOut");a&&(a.style.display="block",a.textContent="The tournament ended because of someone leaving the room.",setTimeout(()=>{a.style.display="none"},6e3)),await this.removeLocalStorageTournament()}else if(!(r.success==!0&&r.finished==!1))throw r.success==!1?new Error("failure"):new Error("not good result json")}catch{}}}async disconnectedFromRoom(){try{const e=await fetch("https://localhost:4430/api/closed_ws_in_room",{method:"GET",credentials:"include"});if(!e.ok)throw new Error("erreur http : "+e.status);const t=await e.json();if(t.success==!0&&t.closed==!0)return!0;if(t.success==!1)throw new Error("failure");return!1}catch{throw new Error("failure")}}async reconnectToRoom(){const e=sessionStorage.getItem("room");if(e!==null){let o=JSON.parse(e).room_id,n;try{n=await this.disconnectedFromRoom()}catch{return}try{const r=await fetch("https://localhost:4430/api/tournament_started/"+o,{method:"GET",credentials:"include"});if(!r.ok)throw new Error("erreur http : "+r.status);const a=await r.json();if(a.success==!0&&a.started==!1&&n==!0){let s=Number(o);const i=await this.join_room_http(s);await this.connect_join_room(s),sessionStorage.setItem("room",JSON.stringify({room_id:i.room_id,admin:!1,room_name:i.room_name,user_id:i.user_id})),await this.changeRoomPageInformations(),await this.changeRoomPage("in")}else a.success==!0&&a.started==!0&&n==!0&&(alert("je ne peux PAS rejoindre la room quitte car le tournoi A DEJA commmence"),await this.removeLocalStorageTournament());return a}catch{}}}async showRoomPageWithLocalStorage(){if(sessionStorage.getItem("room")!==null){if(sessionStorage.getItem("tournament_finished")=="true"){await this.changeRoomPage("finished");return}sessionStorage.getItem("tournament_started")=="true"?await this.changeRoomPage("started"):await this.changeRoomPage("in")}else await this.changeRoomPage("out")}async changeRoomPage(e){const t=this.container.querySelector("#room_in"),o=this.container.querySelector("#room_started"),n=this.container.querySelector("#room_out"),r=this.container.querySelector("#room_finished"),a=this.container.querySelector("#room_forbidden"),s=this.container.querySelector("#room_loading"),i=this.container.querySelector("#room_playing");if(!(t&&o&&n&&r&&a&&s&&i))return;[t,o,n,r,a,s,i].forEach(c=>{c&&(c.style.display="none")}),e==="in"?(await this.changeRoomPageInformations(),t.style.display="block"):e=="out"?n.style.display="block":e=="started"?(await this.changeRoomPageInformationsStarted(),o.style.display="block"):e=="finished"?(await this.changeRoomPageInformationsFinished(),r.style.display="block"):e=="forbidden"?a.style.display="block":e=="loading"?s.style.display="block":e=="playing"&&(i.style.display="block")}async changeRoomPageInformationsFinished(){const e=sessionStorage.getItem("room");if(e!==null){let o=JSON.parse(e).room_id;try{const n=await fetch("https://localhost:4430/api/winner/"+o,{method:"GET",credentials:"include"});if(!n.ok)throw new Error("erreur http : "+n.status);const r=await n.json();if(r.success==!0){const a="The winner is : "+r.winner_username;this.container.querySelector("#winnerName")&&(this.container.querySelector("#winnerName").textContent=a)}}catch{return!1}}}async changeRoomPageInformations(){const e=sessionStorage.getItem("room");if(e!==null){await this.showInButtonsIfAdmin();const t=JSON.parse(e),o=this.container.querySelector("#nameRoomNew"),n=this.container.querySelector("#idRoomNew");o&&n&&(this.container.querySelector("#nameRoomNew").textContent=t.room_name,this.container.querySelector("#idRoomNew").textContent="ID : "+t.room_id);let r=t.room_id;try{const a=await fetch("https://localhost:4430/api/rooms_players/"+r,{method:"GET",credentials:"include"});if(!a.ok)throw new Error("erreur http : "+a.status);const s=await a.json(),i=s.tabl_players;if(s.success==!1)return;if(!this.container.querySelector("#tablePlayersRoom")){alert("aucune tablePlayersRoom trouv√©e");return}this.container.querySelector("#tablePlayersRoom").innerHTML="";let c=0;for(const m of i){const h=document.createElement("td"),p=document.createElement("td");h.className="px-6 py-3 text-white font-tech",p.className="px-6 py-3 text-center",h.textContent=m.username,p.innerHTML=`<button data-id="${m.user_id}" id="reject_player" class="text-red-400 hover:text-red-300 hover:bg-red-500/20 px-2 py-1 rounded transition-colors">‚úï</button>`;const y=document.createElement("tr");y.className="border-b border-cyber-light/10",y.appendChild(h),t.admin&&c!=0&&y.appendChild(p),this.container.querySelector("#tablePlayersRoom").appendChild(y),c++}await this.enable_kick_button(),await this.showInButtonsIfAdmin()}catch{}}else{const t=this.container.querySelector("#nameRoomNew"),o=this.container.querySelector("#idRoomNew");t&&o&&(this.container.querySelector("#nameRoomNew").textContent="NULL",this.container.querySelector("#idRoomNew").textContent="ID : NULL")}}async connect_join_room(e){const t=new WebSocket("wss://localhost:4430/api/ws/join_room/"+e);t.addEventListener("open",()=>{t.readyState,WebSocket.OPEN}),t.addEventListener("message",async o=>{sessionStorage.getItem("room")||alert("message recu WS false : "+o.data);const n=sessionStorage.getItem("room");if(n!==null){const r=JSON.parse(n),a=JSON.parse(o.data);a.success==!0&&a.cause=="user_joined"&&await this.changeRoomPageInformations(),a.success==!0&&a.cause=="tournament_stopped"&&await this.removeLocalStorageTournament(),a.success==!0&&a.cause=="kick"&&Number(a.id_player)==Number(r==null?void 0:r.user_id)&&(alert("je dois partir de la room"),sessionStorage.removeItem("room"),sessionStorage.setItem("tournament_started","false"),await this.removeLocalStorageTournament(),await this.changeRoomPage("out")),a.success==!0&&a.cause=="kick"&&Number(a.id_player)!=Number(r==null?void 0:r.user_id)&&(alert("un joueur est parti. Affichage de la nouvelle liste de joueurs"),await this.changeRoomPageInformations()),a.success==!0&&a.cause=="list_matchs"&&(sessionStorage.setItem("tournament_started","true"),await this.changeRoomPage("started")),a.success==!0&&a.cause=="end_of_tournament"&&(console.log("Tournament ended, winner:",a.winner),await this.cleanupConnect4Game(),sessionStorage.setItem("tournament_finished","true"),await this.changeRoomPageInformationsFinished(),await this.changeRoomPage("finished"))}}),t.addEventListener("close",()=>{sessionStorage.setItem("tournament_started","false")}),t.addEventListener("error",o=>{alert(o)}),setInterval(()=>{t.send("ping new")},4e3)}async join_room_http(e){try{const t=await fetch("https://localhost:4430/api/connect4/join_room/"+e,{method:"GET",credentials:"include"});if(!t.ok)throw new Error("erreur http : "+t.status);const o=await t.json();return o.success==!1&&alert("cannot join room because : "+o.error),o}catch{}}async joinClickEvent(){const e=this.container.querySelector("#buttonJoin");e&&e.addEventListener("click",async()=>{e.style.display="none";let t=Number(this.container.querySelector("#roomIdJoin").value);if(await this.checkIfRoomExists(t))if(await this.checkIfTournamentStarted(t)==!1){if(await this.checkIfTournamentEnded(t)){alert("La room que vous essayez de joindre est d√©ja finie"),e.style.display="inline-block";return}if(await this.canShowRoomPage()==!1){alert("Join Button : cant access page because you are already in a room"),e.style.display="inline-block";return}const o=await this.join_room_http(t);if(o.success==!1){alert("error when joining room : "+o.error),e.style.display="inline-block";return}await this.connect_join_room(t),sessionStorage.setItem("room",JSON.stringify({room_id:o.room_id,admin:!1,room_name:o.room_name,user_id:o.user_id})),await this.changeRoomPageInformations(),await this.changeRoomPage("in")}else alert("la room que vous essayez de joindre a d√©ja commenc√©"),e.style.display="inline-block";else alert("la room que vous essayez de joindre n'existe pas, v√©rifiez l'id"),e.style.display="inline-block"})}async checkIfTournamentStarted(e){try{const t=await fetch("https://localhost:4430/api/tournament_started/"+e,{method:"GET",credentials:"include"});if(!t.ok)throw new Error("erreur http : "+t.status);const o=await t.json();return o.success==!0&&o.started==!0?!0:o.success==!0&&o.started==!1?!1:(alert("error when checking if tournament started"),!0)}catch{return alert("error when checking if tournament started catch"),!0}}async checkIfTournamentEnded(e){try{const t=await fetch("https://localhost:4430/api/tournament_finished/"+e,{method:"GET",credentials:"include"});if(!t.ok)throw new Error("erreur http : "+t.status);const o=await t.json();if(o.success==!0&&o.finished==!0)return!0}catch{alert("error when checkIfTournamentEnded catch")}try{const t=await fetch("https://localhost:4430/api/tournament_finished_with_error/"+e,{method:"GET",credentials:"include"});if(!t.ok)throw new Error("erreur http : "+t.status);const o=await t.json();if(o.success==!0&&o.finished==!0)return!0}catch{alert("error when checkIfTournamentEnded catch")}return!1}async checkIfRoomExists(e){try{const t=await fetch("https://localhost:4430/api/room_exists/"+e,{method:"GET",credentials:"include"});if(!t.ok)throw new Error("erreur http : "+t.status);const o=await t.json();return o.success==!0&&o.exists==!0}catch{return!1}}async createClickEvent(){const e=this.container.querySelector("#buttonCreate");e&&e.addEventListener("click",async()=>{if(e.style.display="none",await this.canShowRoomPage()==!1){alert("you cant create a room because you are already in a room in another page"),e.style.display="inline-block";return}let t=this.container.querySelector("#roomNameCreate").value;try{const o=await fetch("https://localhost:4430/api/connect4/create_room",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:t}),credentials:"include"});if(!o.ok)throw new Error("erreur http : "+o.status);const n=await o.json();n.success?(sessionStorage.setItem("room",JSON.stringify({room_id:n.room_id,admin:!0,room_name:n.room_name,user_id:n.user_id})),await this.join_room_http(n.room_id),await this.connect_join_room(n.room_id),await this.changeRoomPageInformations(),await this.changeRoomPage("in")):(alert("error when creating room"),e.style.display="inline-block")}catch{alert("erreur denvoi formulaire create room"),e.style.display="inline-block"}})}async kick_player(e,t){try{const o=await fetch("https://localhost:4430/api/reject_from_room/"+t+"/"+e,{method:"GET",credentials:"include"});if(!o.ok)throw new Error("erreur http : "+o.status);return await o.json()}catch{alert("erreur denvoi kick player")}}async enable_kick_button(){const e=this.container.querySelectorAll("button[data-id]");e&&e.forEach(t=>{t.addEventListener("click",async o=>{const n=o.currentTarget,r=Number(n.dataset.id),a=sessionStorage.getItem("room");if(a!==null){const s=JSON.parse(a),i=s==null?void 0:s.room_id;await this.kick_player(i,r)}})})}async startTournament(e){try{const t=await fetch("https://localhost:4430/api/start/"+e,{method:"GET",credentials:"include"});if(!t.ok)throw new Error("erreur http : "+t.status);return await t.json()}catch{alert("erreur denvoi du tournament start")}}async my_room_nb_players(){try{const e=await fetch("https://localhost:4430/api/my_room_nb_players",{method:"GET",credentials:"include"});if(!e.ok)throw new Error("erreur http : "+e.status);const t=await e.json();return t.success==!0?Number(t.nb_players):(t.success==!1,-1)}catch{return alert("erreur denvoi du my_room_nb_players"),-1}}async startClickEvent(){const e=this.container.querySelector("#buttonStart");e&&e.addEventListener("click",async()=>{if(await this.my_room_nb_players()<2){alert("The tournament can't start. It needs 2 or more players.");return}const o=sessionStorage.getItem("room");if(o!==null){const n=JSON.parse(o),r=n==null?void 0:n.room_id;r&&(await this.startTournament(r),await this.changeRoomPageInformationsStarted(),await this.changeRoomPage("started"))}})}async destroyClickEvent(){const e=this.container.querySelector("#buttonDestroy");e&&e.addEventListener("click",async()=>{const t=sessionStorage.getItem("room");if(t!==null){const o=JSON.parse(t),n=o==null?void 0:o.room_id;if(n)try{const r=await fetch("https://localhost:4430/api/close_room/"+n,{method:"GET",credentials:"include"});if(!r.ok)throw new Error("erreur http : "+r.status);const a=await r.json();return a.success==!0?(alert("Room destroyed successfully"),await this.removeLocalStorageTournament(),await this.changeRoomPage("out")):alert("Error destroying room: "+a.error),a}catch{alert("erreur lors de la destruction de la room")}}})}async quitFinishClickEvent(){const e=this.container.querySelector("#buttonFinish");e&&e.addEventListener("click",async()=>{sessionStorage.removeItem("room"),sessionStorage.removeItem("finished"),sessionStorage.removeItem("tournament_started"),sessionStorage.removeItem("tournament_finished"),sessionStorage.removeItem("match_id"),await this.changeRoomPage("out")})}async canPlay(e){try{const t=await fetch("https://localhost:4430/api/can_play/"+e,{method:"GET",credentials:"include"});if(!t.ok)throw new Error("erreur http : "+t.status);const o=await t.json();return o.success==!1,{canPlay:o.can_play,match_id:o.match_id}}catch{throw alert("erreur avec la fonction canPlay : catch"),new Error("db_access_front")}}async changeRoomPageInformationsStarted(){const e=sessionStorage.getItem("room");if(e!==null){const t=JSON.parse(e),o=this.container.querySelector("#nameRoomNewStarted"),n=this.container.querySelector("#idRoomNewStarted");o&&n&&(this.container.querySelector("#nameRoomNewStarted").textContent=t.room_name,this.container.querySelector("#idRoomNewStarted").textContent="ID : "+t.room_id);let r=t.room_id;try{await this.showMatchsList(Number(r)),await this.showJoinMatchButtonIfPossible(Number(r)),await this.showLastMatchResult(),await this.showActualRound()}catch{}}else{const t=this.container.querySelector("#nameRoomNew"),o=this.container.querySelector("#idRoomNew");t&&o&&(this.container.querySelector("#nameRoomNew").textContent="NULL",this.container.querySelector("#idRoomNew").textContent="ID : NULL")}}async showActualRound(){try{const e=await fetch("https://localhost:4430/api/my_room_round",{method:"GET",credentials:"include"});if(!e.ok)throw new Error("erreur http : "+e.status);const t=await e.json();if(t.success==!0){const o=this.container.querySelector("#roundRoomNewStarted");o&&(o.textContent="Round : "+t.round)}}catch{alert("error showActualRound")}}async showLastMatchResult(){try{const e=await fetch("https://localhost:4430/api/last_match_result_room",{method:"GET",credentials:"include"});if(!e.ok)throw new Error("erreur http : "+e.status);const t=await e.json();if(t.success==!0)if(t.played)if(t.won_last_match){const o=this.container.querySelector("#lastMatchResult");o&&(o.textContent="Last match : won. You can continue")}else{const o=this.container.querySelector("#lastMatchResult");o&&(o.textContent="Last match : lost. Eliminated")}else{const o=this.container.querySelector("#lastMatchResult");o&&(o.textContent="")}else alert("result success a false lastmatchresult")}catch{alert("error last match result catch")}}async showJoinMatchButtonIfPossible(e){var t,o;try{const n=await this.canPlay(e);if(n.canPlay==!0){sessionStorage.setItem("match_id",n.match_id);const r=document.createElement("a");r.setAttribute("data-route","/play/connect4"),r.setAttribute("href","/play/connect4"),r.id="joinRealMatch",r.textContent="Join my 1v1 match",r.className="inline-block bg-gradient-to-r from-neon-cyan to-neon-pink text-white px-4 py-2 rounded text-xl",this.container.querySelector("#joinMatchDiv")&&(this.container.querySelector("#joinMatchDiv").innerHTML="",(t=this.container.querySelector("#joinMatchDiv"))==null||t.appendChild(r))}else{const r=document.createElement("p");r.className="text-white px-4 py-2 rounded text-xl",r.textContent="Waiting for the next match...",this.container.querySelector("#joinMatchDiv")&&(this.container.querySelector("#joinMatchDiv").innerHTML="",(o=this.container.querySelector("#joinMatchDiv"))==null||o.appendChild(r))}}catch{}}async showMatchsList(e){var t;try{const o=await fetch("https://localhost:4430/api/matchs_current/"+e,{method:"GET",credentials:"include"});if(!o.ok)throw alert("cest la reponse http qui est pas bonne pour lerreur change changepageinformationstarted"),new Error("erreur http : "+o.status);const r=(await o.json()).matchs,a=(t=this.container)==null?void 0:t.querySelector("#tablePlayersRoomStarted");a&&(a.innerHTML=""),sessionStorage.setItem("tournament_started","true");for(const s of r){const i=document.createElement("td"),d=document.createElement("td"),c=document.createElement("td");i.textContent=s.id_match,d.textContent=s.first_player,c.textContent=s.second_player,i.className="border border-gray-300 px-4 py-2",d.className="border border-gray-300 px-4 py-2",c.className="border border-gray-300 px-4 py-2";const m=document.createElement("tr");m.appendChild(i),m.appendChild(d),m.appendChild(c);const h=this.container.querySelector("#tablePlayersRoomStarted");h&&h.appendChild(m)}}catch{}}async removeLocalStorageTournament(){sessionStorage.removeItem("room"),sessionStorage.removeItem("finished"),sessionStorage.removeItem("tournament_started"),sessionStorage.removeItem("tournament_finished"),sessionStorage.removeItem("match_id")}async quitRoom(){try{const e=await fetch("https://localhost:4430/api/quit_room",{method:"GET",credentials:"include"});if(!e.ok)throw new Error("erreur http : "+e.status);const t=await e.json();t.success==!0&&t.quit==!0?(alert("vous avez quitt√© la room avec succ√®s"),await this.removeLocalStorageTournament(),await this.changeRoomPage("out")):t.success==!0&&t.quit==!1?alert("Vous ne pouvez pas quitter la room car le tournoi a d√©j√† commenc√©"):alert("Erreur lors de la tentative de quitter la room: "+t.error)}catch{alert("erreur denvoi quitRoom()")}}async quitRoomEvent(){const e=this.container.querySelector("#buttonQuitRoom");e&&e.addEventListener("click",async()=>{await this.quitRoom()})}async playAgainClickEvent(){const e=this.container.querySelector("#buttonPlayAgain");e&&e.addEventListener("click",async()=>{try{sessionStorage.removeItem("room"),sessionStorage.removeItem("finished"),sessionStorage.removeItem("tournament_started"),sessionStorage.removeItem("tournament_finished"),sessionStorage.removeItem("match_id"),await this.changeRoomPage("out");const t=this.container.querySelector("#messageOut");t&&(t.style.display="block",t.textContent="Ready for a new tournament! Create or join a room.",t.style.color="#00ffff",setTimeout(()=>{t.style.display="none"},3e3))}catch(t){console.error("Error in play again:",t),alert("Error starting new game. Please try again.")}})}async mainMenuClickEvent(){const e=this.container.querySelector("#buttonMainMenu");e&&e.addEventListener("click",async()=>{try{sessionStorage.removeItem("room"),sessionStorage.removeItem("finished"),sessionStorage.removeItem("tournament_started"),sessionStorage.removeItem("tournament_finished"),sessionStorage.removeItem("match_id"),this.router?this.router.navigate("/dashboard"):window.location.href="/dashboard"}catch(t){console.error("Error navigating to main menu:",t),alert("Error navigating to main menu. Please try again.")}})}async joinMatchClickEvent(){const e=this.container.querySelector("#joinMatchButton");e&&e.addEventListener("click",async()=>{try{const t=sessionStorage.getItem("room");if(!t){alert("Erreur: Pas d'informations de room trouv√©es.");return}const n=JSON.parse(t).id_room,r=await fetch(`https://localhost:4430/api/can_play/${n}`,{method:"GET",credentials:"include"});if(!r.ok)throw new Error("erreur http : "+r.status);const a=await r.json();if(a.success&&a.can_play)sessionStorage.setItem("match_id",a.match_id.toString()),await this.startConnect4Match(a.match_id);else{const s=this.container.querySelector("#messageOut");s&&(s.style.display="block",s.textContent="Aucun match disponible pour le moment. Attendez qu'un autre joueur soit pr√™t ou qu'un nouveau round commence.",setTimeout(()=>{s.style.display="none"},5e3))}}catch(t){console.error("Error joining match:",t),alert("Erreur lors de la tentative de rejoindre le match.")}})}async giveUpClickEvent(){const e=this.container.querySelector("#giveUpButton");e&&e.addEventListener("click",async()=>{if(confirm("√ätes-vous s√ªr de vouloir abandonner ? Votre adversaire gagnera automatiquement."))try{const t=sessionStorage.getItem("match_id");if(t){const o=await fetch("https://localhost:4430/api/stop_match/"+t,{method:"GET",credentials:"include"});if(!o.ok)throw new Error("erreur http : "+o.status);const n=await o.json();n.success?(await this.cleanupConnect4Game(),await this.changeRoomPage("started"),alert("Vous avez abandonn√© le match.")):alert("Erreur lors de l'abandon du match: "+n.error)}else alert("Aucun match en cours trouv√©.")}catch(t){console.error("Error giving up match:",t),alert("Erreur lors de l'abandon du match.")}})}async startConnect4Match(e){try{await this.changeRoomPage("loading");const t=this.container.querySelector("#loadingMatchId");t&&(t.textContent=e.toString()),await this.connectToGameWebSocket(e)}catch(t){console.error("Error starting Connect4 match:",t),alert("Erreur lors du d√©marrage du match Connect4.")}}async connectToGameWebSocket(e){try{this.gameSocket&&this.gameSocket.close(),console.log(`Connecting to Connect4 WebSocket for match ${e}`),this.gameSocket=new WebSocket(`wss://localhost:4430/api/ws/play/${e}`),this.gameSocket.addEventListener("open",()=>{console.log("Connected to Connect4 match WebSocket"),this.gameSocket&&this.gameSocket.readyState===WebSocket.OPEN&&(console.log("Sending connection message to server"),this.gameSocket.send(JSON.stringify({type:"connection",gameType:"connect4"})))}),this.gameSocket.addEventListener("message",async t=>{try{const o=JSON.parse(t.data);console.log("Received WebSocket message:",o),await this.handleGameMessage(o)}catch(o){console.error("Error parsing game message:",o)}}),this.gameSocket.addEventListener("close",t=>{if(console.log("Game WebSocket closed:",t.code,t.reason),t.code!==1e3){const o=this.container.querySelector("#messageOut");o&&(o.style.display="block",o.textContent="Connexion au jeu interrompue",setTimeout(()=>{o.style.display="none"},5e3))}}),this.gameSocket.addEventListener("error",t=>{console.error("Game WebSocket error:",t);const o=this.container.querySelector("#messageOut");o&&(o.style.display="block",o.textContent="Erreur de connexion au jeu",setTimeout(()=>{o.style.display="none"},5e3))})}catch(t){console.error("Error connecting to game WebSocket:",t),alert("Erreur lors de la connexion au jeu.")}}async handleGameMessage(e){if(console.log("Received game message:",e),e.error){console.error("Game error received:",e.error),alert(`Erreur de jeu: ${e.error}`);return}switch(e.type){case"connection":console.log("Connection message received:",e),this.updateLoadingStatus(e);break;case"waiting_for_player":console.log("Waiting for player message received"),this.updateLoadingStatus({message:"waiting_for_player"});break;case"both_players":console.log("Both players connected message received"),this.updateLoadingStatus({message:"both_players"});break;case"game_start":console.log("Game start message received:",e),await this.startActualConnect4Game(e);break;case"move":console.log("Move message received:",e),this.handleConnect4Move(e);break;case"game_end":console.log("Game end message received:",e),await this.handleConnect4GameEnd(e.winner);break;case"stop_match":console.log("Match stopped by opponent"),await this.cleanupConnect4Game();const t=sessionStorage.getItem("room");if(t){const n=JSON.parse(t).room_id;await this.checkIfTournamentEnded(n)?(await this.changeRoomPageInformationsFinished(),await this.changeRoomPage("finished"),alert(`Tournoi termin√© ! ${e.winner_username||"L'adversaire"} a gagn√© le tournoi.`)):(await this.changeRoomPage("started"),alert(`Match termin√©. ${e.winner_username||"L'adversaire"} a gagn√©.`))}else await this.changeRoomPage("started"),alert(`Match termin√©. ${e.winner_username||"L'adversaire"} a gagn√©.`);break;default:console.log("Unknown game message type:",e.type,e),e.message&&this.updateLoadingStatus(e)}}updateLoadingStatus(e){const t=this.container.querySelector("#loadingStatusText"),o=this.container.querySelector("#loadingIndicatorText");t&&o&&(e.message==="waiting_for_player"?(t.textContent="Waiting for another player...",o.textContent="One player connected, waiting for second player to join"):e.message==="both_players"?(t.textContent="Both players connected!",o.textContent="Starting Connect4 game in a few seconds..."):e.message==="connected"&&(t.textContent="Connected to match!",o.textContent="Waiting for game to start..."))}async startActualConnect4Game(e){try{console.log("Starting actual Connect4 game with data:",e),await this.changeRoomPage("playing");const t=this.container.querySelector("#matchInfo");if(t){const r=e.isPlayer1?e.player2:e.player1;t.textContent=`Match vs ${r||"Opponent"}`}const o=this.container.querySelector("#gameStatusText");o&&(e.isPlayer1?o.textContent="You are Player 1 (Red) - Your turn to play!":o.textContent="You are Player 2 (Yellow) - Wait for opponent's move");const n=this.container.querySelector("#connect4GameContainer");if(n){n.innerHTML="";try{const{default:r}=await v(async()=>{const{default:s}=await import("./connect4-BbXMBGIx.js");return{default:s}},__vite__mapDeps([0,1,2]));this.connect4Game=new r(e.player1||"Player 1",e.player2||"Player 2",{isTournamentMode:!0,onGameEnd:async s=>{console.log("Local game ended, winner:",s),setTimeout(()=>{this.customizeOnlineTournamentPage()},100)}}),this.connect4Game.setMultiplayerCallbacks&&this.connect4Game.setMultiplayerCallbacks({onMove:s=>{this.gameSocket&&this.gameSocket.readyState===WebSocket.OPEN?(console.log("Sending move to server, column:",s),this.gameSocket.send(JSON.stringify({type:"move",column:s}))):console.error("WebSocket not connected, cannot send move")}});const a=this.connect4Game.render();if(a)n.appendChild(a),console.log("Connect4 game component rendered successfully");else throw new Error("Failed to render Connect4 component")}catch(r){console.error("Error loading Connect4 component:",r),alert("Erreur lors du chargement du composant Connect4. Veuillez r√©essayer."),await this.changeRoomPage("started")}}else console.error("Connect4 game container not found"),alert("Erreur: conteneur de jeu introuvable.")}catch(t){console.error("Error starting actual Connect4 game:",t),alert("Erreur lors du d√©marrage du jeu Connect4. Veuillez r√©essayer."),await this.changeRoomPage("started")}}handleConnect4Move(e){if(console.log("Handling Connect4 move:",e),this.connect4Game&&e.board)try{this.connect4Game.updateGameState?this.connect4Game.updateGameState(e.board,e.currentPlayer):console.warn("updateGameState method not available on Connect4 component");const t=this.container.querySelector("#gameStatusText");if(t){const o=e.currentPlayer||1;o===(e.isPlayer1?1:2)?(t.textContent=`Your turn! (Player ${o})`,t.className="text-xl text-neon-cyan font-cyber"):(t.textContent=`Opponent's turn (Player ${o})`,t.className="text-xl text-yellow-400 font-cyber")}}catch(t){console.error("Error handling Connect4 move:",t)}else console.warn("Connect4 game not initialized or missing move data")}async cancelWaitClickEvent(){const e=this.container.querySelector("#cancelWaitButton");e&&e.addEventListener("click",async()=>{confirm("√ätes-vous s√ªr de vouloir annuler l'attente ?")&&await this.cancelWaitForOpponent()})}async cancelWaitForOpponent(){try{const e=sessionStorage.getItem("match_id");if(e)if(this.gameSocket&&(this.gameSocket.close(),this.gameSocket=null),(await fetch("https://localhost:4430/api/cancel_match/"+e,{method:"GET",credentials:"include"})).ok)sessionStorage.removeItem("match_id"),await this.changeRoomPage("started");else throw new Error("Failed to cancel match")}catch(e){console.error("Error canceling wait:",e),alert("Erreur lors de l'annulation.")}}async handleConnect4GameEnd(e){try{console.log("Handling Connect4 game end, winner:",e),await this.cleanupConnect4Game()}catch(t){console.error("Error handling Connect4 game end:",t)}}}export{_ as default};
