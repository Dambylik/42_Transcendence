worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout 65;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling off;

    server {
        listen 80;
        server_name localhost;

        # Redirige toute la requÃªte HTTP vers HTTPS
        return 301 https://$host:4430$request_uri;
    }

    server {
        root /usr/share/nginx/html;
        index index.html index.htm;


        listen 443 ssl;
        server_name localhost;

        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;


        # location ^~ /uploads/
        # {
        #     root /usr/share/nginx/;
        #     try_files $uri = 404;
        # }

        location ~* ^/uploads/.*\.(jpg|jpeg|png|gif|webp|svg)$
        {
            root /usr/share/nginx/;
            try_files $uri = 404;
        }



    
        location /api {
            proxy_pass http://back_end_fastify:3010/api; # ou http://back_end_fastify:3010 pour rediriger localhost/api vers localhost
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            
            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        location ~* \.(?:ico|css|js|gif|jpe?g|png|woff2?|ttf|svg|eot)$ {
            try_files $uri =404;
            # access_log off;
            # expires 6M;
            # add_header Cache-Control "public";
        }


        location / {
            try_files $uri /index.html;
        }




        # Configuration du reverse proxy
        # location / {
        #     proxy_pass http://backend_server_address:3000;  # Redirige vers le backend
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        # }

        # Logging (facultatif) : a voir si jenleve
        access_log  /var/log/nginx/access.log;
        error_log   /var/log/nginx/error.log;
    }
    
}

# events {}

# http {
#     server {
#         listen 443 ssl;
#         server_name localhost;

#         ssl_certificate /etc/nginx/certs/server.crt;
#         ssl_certificate_key /etc/nginx/certs/server.key;

#         ssl_protocols TLSv1.2 TLSv1.3;
#         ssl_ciphers HIGH:!aNULL:!MD5;

#         location / {
#             root /usr/share/nginx/html;
#             index index.html;
#         }
#     }
# }